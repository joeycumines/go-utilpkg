package floater

import (
	"bytes"
	"fmt"
	"golang.org/x/exp/maps"
	"golang.org/x/exp/slices"
	"math"
	"math/big"
	"math/rand/v2"
	"strconv"
	"strings"
	"testing"
)

func isNumericByte(b byte) bool {
	return b >= '0' && b <= '9'
}

var bmr string

func runBenchmarkFormatDecimalRat(b *testing.B, input string, prec int, floatPrec uint, output string) {
	b.Helper()
	r, _ := new(big.Rat).SetString(input)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bmr = FormatDecimalRat(r, prec, floatPrec)
	}
	if bmr != output {
		b.Fatalf(`unexpected output: %q != %q`, bmr, output)
	}
}

func runBenchmarkBigRatFloatString(b *testing.B, input string, prec int) {
	b.Helper()
	r, _ := new(big.Rat).SetString(input)
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bmr = r.FloatString(prec)
	}
	b.StopTimer()
	dec := len(bmr) - 1 - prec
	if dec < 0 || dec >= len(bmr) || (bmr[dec] == '.') != (prec != 0) {
		b.Fatalf(`unexpected output (%d): %q`, prec, bmr)
	}
}

func runBenchmarkBigRatFloatText(b *testing.B, input string, prec int, floatPrec uint, auto bool) {
	b.Helper()
	r, _ := new(big.Rat).SetString(input)
	f := new(big.Float).SetPrec(floatPrec).SetRat(r)
	var precForCall int
	if auto {
		precForCall = -1
	} else {
		precForCall = prec
	}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bmr = f.Text('f', precForCall)
	}
	b.StopTimer()
	if !auto {
		dec := len(bmr) - 1 - prec
		if dec < 0 || dec >= len(bmr) || (bmr[dec] == '.') != (prec != 0) {
			b.Fatalf(`unexpected output (specific, %d): %q`, prec, bmr)
		}
	}
}

func runBenchmarkStrconvFormatFloat(b *testing.B, input string, prec int, auto bool) {
	b.Helper()
	r, _ := new(big.Rat).SetString(input)
	f, _ := r.Float64()
	var precForCall int
	if auto {
		precForCall = -1
	} else {
		precForCall = prec
	}
	b.ReportAllocs()
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		bmr = strconv.FormatFloat(f, 'f', precForCall, 64)
	}
	b.StopTimer()
	if !auto {
		dec := len(bmr) - 1 - prec
		if dec < 0 || dec >= len(bmr) || (bmr[dec] == '.') != (prec != 0) {
			b.Fatalf(`unexpected output (specific, %d): %q`, prec, bmr)
		}
	}
}

func BenchmarkFormatDecimalRat(b *testing.B) {
	for _, tc := range [...]struct {
		name      string
		input     string
		prec      int
		floatPrec uint
		output    string
	}{
		{"DecimalRat_1", "-18446744073709551557/480", -1, 0, "-38430716820228232.41042"},
		{"DecimalRat_2", "1/4", -1, 0, "0.25"},
		{"DecimalRat_3", "213872935/24", -1, 0, "8911372.291666666666667"},
		{"DecimalRat_4", "213872935/24", 3, 0, "8911372.292"},
		{"DecimalRat_5", "213872935/24", -1, 256, "8911372.2916666666666666666666666666666666666666666666666666666666666666666666667"},
		{"DecimalRat_6", "15665333063902/12633333116050000", -1, 0, "0.00124"},
		{"DecimalRat_7", "25247716232425925/12633333116050000", 2, 0, "2.00"},
		{"SmallInteger", "42/1", -1, 0, "42"},
		{"LargeInteger", "123456789012345678901234567890/1", -1, 0, "123456789012345678901234567890"},
		{"SmallRationalAutoPrec", "1/3", -1, 64, "0.333333333333333333333"},
		{"LargeRationalSpecificPrec", "12345678901234567890/1234567890123456789", 10, 128, "10.0000000000"},
		{"HighPrecision", "1/7", 100, 0, "0.1428571428571428571428571428571428571428571428571428571428571428571428571428571428571428571428571429"},
		{"EdgeZero", "0/1", 5, 64, "0.00000"},
		{"LargeFloatPrec", "123456789012345678901234567890/1234567890123456789", -1, 256, "100000000000.000000000999999999900000000009999999999000000000099999999990000000001"},
		{"ExtremelyLargeInteger", "1234567890123456789012345678901234567890123456789092148752366384884934577583924399439234023400234857557771/1", -1, 0, "1234567890123456789012345678901234567890123456789092148752366384884934577583924399439234023400234857557771"},
		{"LargeRationalHighPrecision", "123456789012345678901/987654321", 100, 0, "124999998873.4374999013445312512331933593595850830080051864623999351692200008103847499898701906251266226171859172"},
		{"SmallRationalExtremePrecision", "1/3", 1000, 0, "0." + strings.Repeat("3", 1000)},
		{"LargeRationalLargeFloatPrec", "12345678901234567891/1234567890123456789", -1, 1024, "10.0000000000000000008100000072900000663471006037578054941961109971846019743798787768568967883977607825196231201185703931599905777478142575059197433037886640644849429868121711799908387379166244150412829868756750995686434141746550681793611205131861966618943896240489455787644047667641833775532587357347354951860849"},
		{"LargeRationalExtremelyLargeFloatPrec", "12345678901234567891/1234567890123456789", -1, 210_407, "10."},
		{"NearZeroHighPrecision", "1/1000000000000000000000000000000000", 33, 0, "0.000000000000000000000000000000001"},
		{"RepeatingDecimalHighPrecision", "10/3", 500, 0, `3.` + strings.Repeat("3", 500)},
		{"VeryUnevenLarge", "1234567890123456789012345678901234567890/987654321", 50, 0, "1249999988734374999015820312399.80224608362747192395465660095056679248811791509390"},
	} {
		b.Run(tc.name, func(b *testing.B) {
			prec := strings.IndexByte(tc.output, '.')
			if prec == -1 {
				prec = 0
			} else {
				prec = len(tc.output) - prec - 1
			}
			b.Run(`FormatDecimalRat`, func(b *testing.B) {
				runBenchmarkFormatDecimalRat(b, tc.input, tc.prec, tc.floatPrec, tc.output)
			})
			b.Run(`big.Rat.FloatString`, func(b *testing.B) {
				runBenchmarkBigRatFloatString(b, tc.input, prec)
			})
			b.Run(`big.Float.Text specific prec`, func(b *testing.B) {
				runBenchmarkBigRatFloatText(b, tc.input, prec, tc.floatPrec, false)
			})
			b.Run(`big.Float.Text auto prec`, func(b *testing.B) {
				runBenchmarkBigRatFloatText(b, tc.input, prec, tc.floatPrec, true)
			})
			b.Run(`strconv.FormatFloat specific prec`, func(b *testing.B) {
				runBenchmarkStrconvFormatFloat(b, tc.input, prec, false)
			})
			b.Run(`strconv.FormatFloat auto prec`, func(b *testing.B) {
				runBenchmarkStrconvFormatFloat(b, tc.input, prec, true)
			})
		})
	}
}

func TestAppendDecimalRat(t *testing.T) {
	nr := func(v string) *big.Rat {
		t.Helper()
		r, ok := new(big.Rat).SetString(v)
		if !ok {
			t.Fatal(`unexpected invalid rat:`, v)
		}
		return r
	}
	for _, tc := range [...]struct {
		name   string
		rat    *big.Rat
		prec   int
		fprec  uint
		result string
	}{
		{`zero`, big.NewRat(0, 1), -1, 0, `0`},
		{`zero with prec 0`, big.NewRat(0, 1), 0, 0, `0`},
		{`zero with prec 1`, big.NewRat(0, 1), 1, 0, `0.0`},
		{`zero with fprec 128`, big.NewRat(0, 1), -1, 128, `0`},
		{`large number of significant digits and low floatPrec`, nr(`167799489101319075473056204671783778853657134707047539294845260401563392904348371258261089013578519182257097872193610745706583844946648101377424220402028127973435142353538392012404014583293616437643479367806052697389425577464078629771715619668690597930943267429627621783884748619556745929406687221617630927221977523030206169253281815948844802020451378652852186126951605975505987475417601383602609629635489217436650997436403671727230317874258195589978899496592287214148673658061621155098795264424354138119844472860079119051773834993895061949548115153938668364392661166473324042571899225251782385908190525066977985960801245264858364157283882098415894489/933415641675522910645025538928310040422604579825451645663381920942988552796813328884687254915740536381772529706932205910407394536667421732335412855380411158539802138847055390214687853958373327630799145693082091096315273713300074746536989321232605329054257842557903501459118692070246154756363612496489368247414340716077187244639253515768692736`), -1, 53, "179769313486231569995921046774104434048386446944329178485314420765176628523124396354701868608387085564428793419425520689308708363451136055357897278026477617073498977686288394835618163294045594434929537447290627480669417384648879122776218333598953852832103282504751611691208117720159985926376802466863339536384"},
		{`rounding negative to zero preserves sign`, big.NewRat(-2, 10000000), 2, 0, `-0.00`},
		{`special case round away from zero 1`, big.NewRat(1, 20), 1, 0, `0.1`},
		{`special case round away from zero 2`, big.NewRat(-1, 200), 2, 0, `-0.01`},
		{`not special case round away from zero`, big.NewRat(1, 2), 0, 0, `0`},
		{`required base formatted value three extra from target`, big.NewRat(5, 101), 1, 0, `0.0`},
		{`required base formatted value three extra from target - more precise`, big.NewRat(5, 101), 6, 0, "0.049505"},
	} {
		t.Run(tc.name, func(t *testing.T) {
			b := make([]byte, 123, 2048)
			for i := range b {
				b[i] = byte(rand.IntN(math.MaxUint8 + 1))
			}
			old := slices.Clone(b)
			result := AppendDecimalRat(b, tc.rat, tc.prec, tc.fprec)
			if s := string(result[len(old):]); s != tc.result {
				t.Errorf(`unexpected output: %q`, s)
			}
			if &b[0] != &result[0] {
				t.Error(`expected same array`)
			}
			if !bytes.Equal(result[:len(old)], old) {
				t.Error(`unexpected prefix mutation`)
			}
		})
	}
}

func FuzzFormatDecimalRat_variant1(f *testing.F) {
	add := func(signbit bool, num uint64, denomSub1 uint64) {
		f.Add(signbit, num, denomSub1)
	}

	add(false, 0, 0)
	add(true, 0, 0)
	add(false, 1, 0)
	add(true, 1, 0)
	add(false, 1, math.MaxUint64)
	add(true, 1, math.MaxUint64)
	add(false, math.MaxUint64, 0)
	add(true, math.MaxUint64, 0)
	add(false, 3, 6)
	add(true, 3, 6)
	add(false, 7, 2)
	add(true, 7, 2)

	f.Fuzz(func(t *testing.T, signbit bool, num uint64, denomSub1 uint64) {
		denom := new(big.Int)
		denom.SetUint64(denomSub1)
		denom.Add(denom, big.NewInt(1))
		rat := new(big.Rat).SetFrac(new(big.Int).SetUint64(num), denom)
		if signbit {
			rat.Neg(rat)
		}
		float := new(big.Float).SetRat(rat)

		isFloatDifferent := func(v *big.Float) bool {
			return v.Cmp(float) != 0 &&
				nextafter(nil, v, float).Cmp(float) != 0
		}

		s := FormatDecimalRat(rat, -1, 0)

		t.Logf(`result string: %s`, s)

		if s == `` {
			t.Fatal(`unexpected empty string`)
		}

		r, ok := new(big.Rat).SetString(s)
		if !ok {
			t.Fatalf(`invalid result (rat): %s`, s)
		}

		f, ok := new(big.Float).SetPrec(float.Prec()).SetString(s)
		if !ok {
			t.Fatalf(`invalid result (float): %s`, s)
		}
		if isFloatDifferent(f) {
			t.Errorf(`invalid result (float): %s: float-converted vals do not match %v != %v`, s, f, float)
		}

		{
			v := new(big.Float).SetRat(r)
			if v.Prec() < float.Prec() {
				t.Errorf(`invalid result (float): %s: rat auto precision was not preserved %v != %v`, s, v.Prec(), float.Prec())
			}
			v.SetPrec(float.Prec())
			if isFloatDifferent(v) {
				t.Errorf(`invalid result (float from rat): %s: float-converted vals do not match %v != %v`, s, v, float)
			}
		}

		decimalIndex := strings.IndexByte(s, '.')

		n, exact := rat.FloatPrec()

		if n != 0 {
			if decimalIndex < 0 {
				t.Fatalf(`invalid result (float): %s: missing decimal`, s)
			}
			// note: behavior has changed - it now uses the float precision to bound the accuracy, even when exact
			// --------
			//ratStr := rat.FloatString(n + 1)
			//var trailingEdges int
			//for i := len(ratStr) - 2; i >= 0 && (ratStr[i] == '0' || ratStr[i] == '9'); i-- {
			//	trailingEdges++
			//}
			//if trailingEdges > n {
			//	t.Fatalf(`invalid result (float): %s: too many trailing edges`, s)
			//}
			//if n-trailingEdges-2 > len(s)-1-decimalIndex {
			//	t.Fatalf(`invalid result (float): %s: expected get least %d decimals got %d: %s (%d trailing)`, s, n, len(s)-1-decimalIndex, ratStr, trailingEdges)
			//}
		} else if exact && decimalIndex != -1 {
			t.Fatalf(`invalid result (float): %s: unexpected decimal`, s)
		}

		for i := range len(s) {
			if i == decimalIndex {
				continue
			}
			if i == 0 && s[i] == '-' && (len(s) >= 4 || (decimalIndex == -1 && len(s) >= 2)) {
				continue
			}
			if !isNumericByte(s[i]) {
				t.Fatalf(`invalid result (float): %s: non-numeric byte get position %d`, s, i)
			}
		}

		{
			_, _, approxDecimalsRat := approximateDecimalBufferSize((*bigRatInfo)(rat), 0)
			_, _, approxDecimalsFloat := approximateDecimalBufferSize((*bigRatInfo)(rat), 0)
			if exact && max(approxDecimalsRat, approxDecimalsFloat) >= n && r.Cmp(rat) != 0 {
				t.Fatalf(`rat values do not match despite format indicating exact: %s != %s`, r, rat)
			}
		}
	})
}

// validating fixed decimals are equivalent to formatting with a very high precision
func FuzzFormatDecimalRat_variant2(f *testing.F) {
	add := func(signbit bool, num uint64, denomSub1 uint64, prec uint8) {
		f.Add(signbit, num, denomSub1, prec)
	}

	for i := 0; i < math.MaxUint8; i++ {
		prec := uint8(i)
		add(false, 0, 0, prec)
		add(true, 0, 0, prec)
		add(false, 1, 0, prec)
		add(true, 1, 0, prec)
		add(false, 1, math.MaxUint64, prec)
		add(true, 1, math.MaxUint64, prec)
		add(false, math.MaxUint64, 0, prec)
		add(true, math.MaxUint64, 0, prec)
		add(false, 3, 6, prec)
		add(true, 3, 6, prec)
		add(false, 7, 2, prec)
		add(true, 7, 2, prec)
		add(true, 3, 757894378, prec)
		add(false, 3, 757894378, prec)
	}

	f.Fuzz(func(t *testing.T, signbit bool, num uint64, denomSub1 uint64, prec uint8) {
		denom := new(big.Int)
		denom.SetUint64(denomSub1)
		denom.Add(denom, big.NewInt(1))
		rat := new(big.Rat).SetFrac(new(big.Int).SetUint64(num), denom)
		if signbit {
			rat.Neg(rat)
		}

		n, exact := rat.FloatPrec()

		t.Logf(`input: prec=%d rat=(%s, %d, %t)`, prec, rat, n, exact)

		s := FormatDecimalRat(rat, int(prec), 0)
		rn := int(prec) + 70
		rs := rat.FloatString(rn)
		expected := new(big.Float).SetPrec(1024).SetRat(rat).Text('f', int(prec))
		t.Logf("result string: %s\nexpected string: %s\nrat string: %s\n", s, expected, rs)

		expectedVal, ok := new(big.Rat).SetString(expected)
		if !ok {
			t.Fatal(`unexpected invalid expected value`)
		}
		actualVal, ok := new(big.Rat).SetString(s)
		if !ok {
			t.Fatal(`unexpected invalid actual value`)
		}
		var truncIndex int
		if prec == 0 {
			truncIndex = len(rs) - rn - 1
		} else {
			truncIndex = len(rs) - rn + int(prec)
		}
		truncVal, ok := new(big.Rat).SetString(rs[:truncIndex])
		if !ok {
			t.Fatal(`unexpected invalid trunc value`)
		}

		checkTrunc := func(v *big.Rat) {
			t.Helper()
			if d := truncVal.Cmp(v); d == 0 {
				return
			}
			delta := new(big.Rat).Sub(v, truncVal)
			delta.Abs(delta)
			for range prec {
				delta.Mul(delta, big.NewRat(10, 1))
			}
			if delta.Cmp(big.NewRat(1, 1)) != 0 {
				t.Fatalf(`unexpected truncation: %s != %s (delta %s)`, v, truncVal, delta)
			}
		}

		checkTrunc(expectedVal)
		checkTrunc(actualVal)

		if s == `` {
			t.Error(`unexpected empty string`)
		} else if expected != s {
			var ok bool
			// can be represented exactly, and equal length, and able to round up (based on the next digit in the exact string)
			toNines := func(v string) string {
				return strings.NewReplacer(`0`, `9`, `1`, `9`, `2`, `9`, `3`, `9`, `4`, `9`, `5`, `9`, `6`, `9`, `7`, `9`, `8`, `9`).Replace(v)
			}
			if (!exact || int(prec) < n) &&
				(len(s) == len(expected) ||
					(min(len(s), len(expected)) == truncIndex &&
						max(len(s), len(expected)) == truncIndex+1 &&
						rs[:truncIndex] == toNines(rs[:truncIndex]))) &&
				(prec == 0 || s[len(s)-1-int(prec)] == '.') &&
				(prec != 0 || strings.IndexByte(s, '.') == -1) &&
				rs[truncIndex] >= '4' &&
				rs[truncIndex] <= '5' {
				n1 := int(s[len(s)-1] - '0')
				n2 := int(expected[len(expected)-1] - '0')
				roundedToEvenOrIsResultIsEpsilon := n1%2 == 0
				if !roundedToEvenOrIsResultIsEpsilon {
					roundedToEvenOrIsResultIsEpsilon = s[len(s)-1] == '1'
					if roundedToEvenOrIsResultIsEpsilon {
						for _, v := range s[:len(s)-1] {
							if v >= '1' && v <= '9' {
								roundedToEvenOrIsResultIsEpsilon = false
								break
							}
						}
					}
				}
				if n1 >= 0 && n1 <= 9 && n2 >= 0 && n2 <= 9 && roundedToEvenOrIsResultIsEpsilon {
					nd := n1 - n2
					withinOneDigit := nd == 1 || nd == -1
					if withinOneDigit || (n1 == 0 && n2 == 9) || (n1 == 9 && n2 == 0) {
						ok = true
						// exclude the epsilon case
						if withinOneDigit && (n1 == 0 || n2 == 0) {
							allZero := true
							for i := len(s) - 2; i >= 0; i-- {
								v := s[i]
								if v < '0' || v > '9' {
									continue
								}
								if v != 0 {
									allZero = false
									break
								}
							}
							if allZero {
								ok = false
							}
						}
					}
				}
			}
			if !ok {
				t.Errorf("unexpected output: %q != %q", s, expected)
			}
		}
	})
}

func ExampleFormatDecimalRat_roundUpEdgeCase1() {
	rat := big.NewRat(5, 101)
	const floatPrec = 53
	float := new(big.Float).SetPrec(floatPrec).SetRat(rat)
	for prec := -1; prec < 19; prec++ {
		fmt.Printf("prec=%d\n", prec)
		fmt.Println(`ours: `, FormatDecimalRat(rat, prec, floatPrec))
		fmt.Println(`float:`, float.Text('f', prec))
		if prec >= 0 {
			fmt.Println(`rat:  `, rat.FloatString(prec))
		}
		fmt.Println(`---`)
	}
	//output:
	//prec=-1
	//ours:  0.049504950495049505
	//float: 0.04950495049504951
	//---
	//prec=0
	//ours:  0
	//float: 0
	//rat:   0
	//---
	//prec=1
	//ours:  0.0
	//float: 0.0
	//rat:   0.0
	//---
	//prec=2
	//ours:  0.05
	//float: 0.05
	//rat:   0.05
	//---
	//prec=3
	//ours:  0.050
	//float: 0.050
	//rat:   0.050
	//---
	//prec=4
	//ours:  0.0495
	//float: 0.0495
	//rat:   0.0495
	//---
	//prec=5
	//ours:  0.04950
	//float: 0.04950
	//rat:   0.04950
	//---
	//prec=6
	//ours:  0.049505
	//float: 0.049505
	//rat:   0.049505
	//---
	//prec=7
	//ours:  0.0495050
	//float: 0.0495050
	//rat:   0.0495050
	//---
	//prec=8
	//ours:  0.04950495
	//float: 0.04950495
	//rat:   0.04950495
	//---
	//prec=9
	//ours:  0.049504950
	//float: 0.049504950
	//rat:   0.049504950
	//---
	//prec=10
	//ours:  0.0495049505
	//float: 0.0495049505
	//rat:   0.0495049505
	//---
	//prec=11
	//ours:  0.04950495050
	//float: 0.04950495050
	//rat:   0.04950495050
	//---
	//prec=12
	//ours:  0.049504950495
	//float: 0.049504950495
	//rat:   0.049504950495
	//---
	//prec=13
	//ours:  0.0495049504950
	//float: 0.0495049504950
	//rat:   0.0495049504950
	//---
	//prec=14
	//ours:  0.04950495049505
	//float: 0.04950495049505
	//rat:   0.04950495049505
	//---
	//prec=15
	//ours:  0.049504950495050
	//float: 0.049504950495050
	//rat:   0.049504950495050
	//---
	//prec=16
	//ours:  0.0495049504950495
	//float: 0.0495049504950495
	//rat:   0.0495049504950495
	//---
	//prec=17
	//ours:  0.04950495049504950
	//float: 0.04950495049504951
	//rat:   0.04950495049504950
	//---
	//prec=18
	//ours:  0.049504950495049505
	//float: 0.049504950495049507
	//rat:   0.049504950495049505
	//---
}

type approximateDecimalBufferSizeTestCase struct {
	name        string
	r           string // rat input
	f           string // float input
	p           uint   // float prec
	e           int    // exponent, for confirmation
	bytes       int
	significand int // only tested against if not zero
	decimals    int // only tested if significand is
}

func (tc approximateDecimalBufferSizeTestCase) val(t interface {
	Helper()
	Fatal(args ...interface{})
	Fatalf(format string, args ...interface{})
}) *big.Float {
	t.Helper()
	if tc.r != `` {
		r, ok := new(big.Rat).SetString(tc.r)
		if !ok {
			t.Fatal(`invalid input rat`)
		}
		f := new(big.Float).SetRat(r)
		if tc.f == `` {
			t.Fatalf(`TODO fill in rat float: %d %q`, f.Prec(), f.Text('g', -1))
		}
		f1, ok := new(big.Float).SetPrec(tc.p).SetString(tc.f)
		if !ok {
			t.Fatal(`invalid input rat float`)
		}
		if f1.Cmp(f) != 0 {
			t.Fatal(`invalid input: rat float cooked`)
		}
		return f
	}
	if tc.f != `` {
		f, ok := new(big.Float).SetPrec(tc.p).SetString(tc.f)
		if !ok {
			t.Fatal(`invalid input`)
		}
		return f
	}
	t.Fatal(`invalid input: neither r nor f are set`)
	return nil // unreachable
}

var approximateDecimalBufferSizeTestCases = [...]approximateDecimalBufferSizeTestCase{
	{`zero`, ``, `0`, 53, 0, 1, 1, 0},
	{`negative zero`, ``, `-0`, 53, 0, 2, 1, 0},
	{`float64 0.1131213778389989`, ``, `0.1131213778389989`, 53, -3, 20, 17, 17},
	{`float64 -0.1131213778389989`, ``, `-0.1131213778389989`, 53, -3, 21, 17, 17},
	{`float64 1.131213778389989`, ``, `1.131213778389989`, 53, 1, 18, 17, 17},
	{`float64 -1.131213778389989`, ``, `-1.131213778389989`, 53, 1, 19, 17, 17},
	{`float64 0.1`, ``, `0.1`, 53, -3, 20, 0, 0},
	{`float64 0.2`, ``, `0.2`, 53, -2, 20, 0, 0},
	{`float64 0.3`, ``, `0.3`, 53, -1, 20, 0, 0},
	{`float64 0.4`, ``, `0.4`, 53, -1, 20, 0, 0},
	{`float64 0.8`, ``, `0.8`, 53, 0, 19, 0, 0},
	{`float64 -0.1`, ``, `-0.1`, 53, -3, 21, 0, 0},
	{`float64 -0.2`, ``, `-0.2`, 53, -2, 21, 0, 0},
	{`float64 -0.3`, ``, `-0.3`, 53, -1, 21, 0, 0},
	{`float64 -0.4`, ``, `-0.4`, 53, -1, 21, 0, 0},
	{`float64 -0.8`, ``, `-0.8`, 53, 0, 20, 0, 0},
	{`float64 1`, ``, `1`, 53, 1, 17, 0, 0},
	{`float64 10`, ``, `10`, 53, 4, 17, 0, 0},
	{`float64 14`, ``, `14`, 53, 4, 17, 0, 0},
	{`float64 3e20`, ``, `3e20`, 53, 69, 22, 0, 0},
	{`float64 1e20`, ``, `1e20`, 53, 67, 22, 0, 0},
	{`float64 0.9999999999999999`, ``, `0.9999999999999999`, 53, 0, 19, 0, 0},
	{`float64 -0.9999999999999999`, ``, `-0.9999999999999999`, 53, 0, 20, 0, 0},
	{`float64 0.5`, ``, `0.5`, 53, 0, 19, 0, 0},
	{`float64 0.6`, ``, `0.6`, 53, 0, 19, 0, 0},
	{`float64 0.0001`, ``, `0.0001`, 53, -13, 23, 0, 0},
	{`float64 1e-20`, ``, `1e-20`, 53, -66, 39, 0, 0},
	{`float64 0.0000000000000001`, ``, `0.0000000000000001`, 53, -53, 35, 0, 0},
	{`float64 epsilon positive`, ``, strconv.FormatFloat(math.SmallestNonzeroFloat64, 'g', -1, 64), 53, -1073, 343, 0, 0},
	{`float64 epsilon negative`, ``, strconv.FormatFloat(-math.SmallestNonzeroFloat64, 'g', -1, 64), 53, -1073, 344, 0, 0},
	{`float64 max positive`, ``, strconv.FormatFloat(math.MaxFloat64, 'g', -1, 64), 53, 1024, 310, 0, 0},
	{`float64 max negative`, ``, strconv.FormatFloat(-math.MaxFloat64, 'g', -1, 64), 53, 1024, 311, 0, 0},
	{`float64 11312137783899.23 - all digits significant simple non-int case`, ``, `11312137783899.23`, 53, 44, 18, 0, 0},
	{`float64 1131213778389989 - all digits accounted for int case`, ``, `1131213778389989`, 53, 51, 17, 0, 0},
	{`float64 11312137783899890 - trailing zero int case`, ``, `11312137783899890`, 53, 54, 18, 0, 0},
	{`float64 11312137783899810 - trailing zero int case`, ``, `11312137783899810`, 53, 54, 18, 0, 0},
	{`float64 11312137783899850 - trailing zero int case`, ``, `11312137783899850`, 53, 54, 18, 0, 0},
	{`float64 113121377838998900 - another trailing zero int case`, ``, `113121377838998900`, 53, 57, 19, 0, 0},
	{`another trailing zero int case larger exponent`, ``, `1.131213778389989e+27`, 53, 90, 29, 0, 0}, // literal 1131213778389989000000000000
	{`enormous exponent high precision`, ``, `9.56283812312389124199992231211153e20_000`, 1000, 66_442, 20_003, 0, 0},
	{`tiny exponent high precision`, ``, `9.56283812312389124199992231211153e-20_000`, 1000, -66435, 20_304, 0, 0},
	{
		`rat test case tiny value`,
		`1/992312746765329556771115994874643748994002060757333344377234732474`,
		"1.007746804885585521320519773044058318888139776710584024413150570298e-66",
		220,
		-219,
		136, 0, 0,
	},
	{
		`rat test case large value`,
		`399231274676532955677111599487464374899400206075733334437723473247482813884328482399530450430054300354050330453238487235729359352003250325994593456034050034598346783496345094358354883400224475757555543593459/3`,
		"133077091558844318559037199829154791633133402025244444812574491082494271294776160799843483476684766784683443484412829078576453117334416775331531152011350011532782261165448364786118294466741491919185181197819.8",
		687,
		685,
		209, 0, 0,
	},
	{`float64 1.999999999999999`, ``, `1.999999999999999`, 53, 1, 18, 17, 17},
	{`float64 1.999999999999999e1`, ``, `1.999999999999999e1`, 53, 5, 18, 17, 16},
	{`float64 1.999999999999999e2`, ``, `1.999999999999999e2`, 53, 8, 18, 17, 15},
	{`float64 1.999999999999999e3`, ``, `1.999999999999999e3`, 53, 11, 18, 17, 14},
	{`float64 1.999999999999999e4`, ``, `1.999999999999999e4`, 53, 15, 18, 17, 13},
	{`float64 1.999999999999999e5`, ``, `1.999999999999999e5`, 53, 18, 18, 17, 12},
	{`float64 1.999999999999999e6`, ``, `1.999999999999999e6`, 53, 21, 18, 17, 11},
	{`float64 1.999999999999999e7`, ``, `1.999999999999999e7`, 53, 25, 18, 17, 10},
	{`float64 1.999999999999999e8`, ``, `1.999999999999999e8`, 53, 28, 18, 17, 9},
	{`float64 1.999999999999999e9`, ``, `1.999999999999999e9`, 53, 31, 18, 17, 8},
	{`float64 1.999999999999999e10`, ``, `1.999999999999999e10`, 53, 35, 18, 17, 7},
	{`float64 1.999999999999999e11`, ``, `1.999999999999999e11`, 53, 38, 18, 17, 6},
	{`float64 1.999999999999999e12`, ``, `1.999999999999999e12`, 53, 41, 18, 17, 5},
	{`float64 1.999999999999999e13`, ``, `1.999999999999999e13`, 53, 45, 18, 17, 4},
	{`float64 1.999999999999999e14`, ``, `1.999999999999999e14`, 53, 48, 18, 17, 3},
	{`float64 1.999999999999999e15`, ``, `1.999999999999999e15`, 53, 51, 17, 17, 0},
	{`float64 1.999999999999999e16`, ``, `1.999999999999999e16`, 53, 55, 18, 17, 0},
	{`float64 1.999999999999999e17`, ``, `1.999999999999999e17`, 53, 58, 19, 17, 0},
	{`float64 1.999999999999999e18`, ``, `1.999999999999999e18`, 53, 61, 20, 17, 0},
	{`float64 9.999999999999999`, ``, `9.999999999999999`, 53, 4, 18, 17, 17},
	{`float64 9.9999999999999999 - rounds up to 10`, ``, `9.9999999999999999`, 53, 4, 17, 0, 0},
	{`float64 99.99999999999999`, ``, `99.99999999999999`, 53, 7, 18, 0, 0},
	{`float64 99.99999999999999`, ``, `99.99999999999999`, 53, 7, 18, 0, 0},
	{`float64 99.999999999999992 - doesnt round up`, ``, `99.999999999999992`, 53, 7, 18, 0, 0},
	{`float64 99.999999999999993 - does round up`, ``, `99.999999999999993`, 53, 7, 17, 0, 0},
	{`rat 99.999999999999993`, `99.999999999999993`, "99.999999999999993", 64, 7, 22, 0, 0},
	{`float64 1.999999999999999e+7`, ``, `1.999999999999999e+7`, 53, 25, 18, 17, 10},
	{`float64 -0.1999999999999993`, ``, `-0.1999999999999993`, 53, -2, 21, 17, 17},
}

func Test_approximateDecimalBufferSize(t *testing.T) {
	for _, tc := range approximateDecimalBufferSizeTestCases {
		t.Run(tc.name, func(t *testing.T) {
			f := tc.val(t)
			if e := f.MantExp(nil); e != tc.e {
				t.Errorf(`unexpected (binary) exponent: %d != %d`, e, tc.e)
			}
			bytes, significand, decimals := approximateDecimalBufferSize((*bigFloatInfo)(f), 0)
			if bytes != tc.bytes {
				t.Errorf(`unexpected bytes: %d != %d`, bytes, tc.bytes)
			}
			var knownExtraRequired int
			if f.Signbit() {
				knownExtraRequired++
			}
			if !f.IsInt() {
				knownExtraRequired++
			}
			if bytes-knownExtraRequired < significand {
				t.Errorf(`unexpected bytes vs significand: %d-%d > %d`, bytes, knownExtraRequired, significand)
			}
			if f.Sign() != 0 && f.Prec() >= 53 && significand < 17 {
				t.Errorf(`unexpected significand: %d < 17`, significand)
			}
			if tc.significand != 0 {
				if significand != tc.significand {
					t.Errorf(`unexpected significand: %d != %d`, significand, tc.significand)
				}
				if decimals != tc.decimals {
					t.Errorf(`unexpected decimals: %d != %d`, decimals, tc.decimals)
				}
			}
			c, ok := new(big.Float).SetPrec(f.Prec()).SetString(f.Text('f', bytes))
			if !ok {
				t.Fatal(`failed to parse formatted float`)
			}
			if c.Cmp(f) != 0 {
				t.Error(`unexpected result: formatted float does not match input`)
			}
			uniqueIdentifiable := f.Text('f', -1)
			minUniqueIdentifiable := len(uniqueIdentifiable)
			if minUniqueIdentifiable > bytes {
				t.Errorf(`unexpected result less than min unique: %d > %d: %s`, minUniqueIdentifiable, bytes, uniqueIdentifiable)
			}
		})
	}
}

type approximateDecimalBufferSizeRatTestCase struct {
	name  string
	value string
}

var approximateDecimalBufferSizeRatTestCases = func() (cases []approximateDecimalBufferSizeRatTestCase) {
	m := make(map[string]string)
	for _, tc := range approximateDecimalBufferSizeTestCases {
		var vr string
		if tc.r != `` {
			if v, ok := new(big.Rat).SetString(tc.r); ok {
				vr = v.String()
			}
		}
		if v, ok := new(big.Rat).SetString(tc.f); ok {
			vf := v.String()
			if vr == `` || vr == vf {
				m[vf] = tc.name
			} else {
				m[vf] = tc.name + ` - float variant`
				m[vr] = tc.name + ` - rat variant`
			}
		}
	}
	k := maps.Keys(m)
	slices.Sort(k)
	for _, k := range k {
		cases = append(cases, approximateDecimalBufferSizeRatTestCase{
			name:  m[k],
			value: k,
		})
	}
	return
}()

func (tc approximateDecimalBufferSizeRatTestCase) test(t *testing.T) {
	r, ok := new(big.Rat).SetString(tc.value)
	if !ok {
		t.Fatal(`invalid input:`, tc.value)
	}
	f := new(big.Float).SetRat(r)
	ri := (*bigRatInfo)(r)
	fi := (*bigFloatInfo)(f)
	rb, rs, rd := approximateDecimalBufferSize(ri, 0)
	fb, fs, fd := approximateDecimalBufferSize(fi, 0)
	t.Log(`r`, ri.Valid(), ri.Signbit(), ri.Sign(), ri.Prec(), ri.Exp(), ri.IsInf(), ri.IsInt())
	t.Log(`f`, fi.Valid(), fi.Signbit(), fi.Sign(), fi.Prec(), fi.Exp(), fi.IsInf(), fi.IsInt())
	if ri.Exp() != fi.Exp() {
		t.Log(`unexpected exponent:`, ri.Exp(), `!=`, fi.Exp())
	}
	if rb != fb || rs != fs || rd != fd {
		t.Log("unexpected rat vs float", rb, rs, rd, `!=`, fb, fs, fd, "for", tc.value)
	}
	if rs != fs {
		t.Error(`unexpected significand:`, rs, fs)
	}

	// nasty constraints on the deltas (didn't feel it was worth it to model the behavior beyond this)
	if rd == fd {
		// special case is float normalised the exponent, because the value was able to left shift
		if rb != fb && !(rb > fb && rd == rs && rs == fs && rb-fb == 1 && rs == fd) {
			t.Error(`unexpected bytes:`, rb, fb, rb-fb)
		}
	} else {
		// special case: bounds of <-3 switching case, where the exponent decimals are dropped as known to be 0
		if rd < fd || rd-fd > 2 {
			t.Error(`unexpected decimals:`, rd, fd)
		}
		// special case: because of the non-normalised exponent, the "trailing zeros on the lhs" calc is off by one
		if rb != fb && rb != fb+1 {
			t.Error(`unexpected bytes:`, rb, fb)
		}
	}

	// simpler sanity check, for the above constraints
	for _, v := range [...]float64{
		float64(rb) - float64(fb),
		float64(rs) - float64(fs),
		float64(rd) - float64(fd),
	} {
		if t.Failed() {
			break
		}
		if !(v >= 0 && v <= 2) {
			t.Error(`unexpected value:`, v)
		}
	}
}

// float values from the test cases (as rat)
func Test_approximateDecimalBufferSize_rat(t *testing.T) {
	for _, tc := range approximateDecimalBufferSizeRatTestCases {
		t.Run(tc.name, tc.test)
	}
}

func Fuzz_approximateDecimalBufferSize_ratInt64NumDenom(f *testing.F) {
	add := func(n, d int64) {
		f.Add(n, d)
	}
	for _, tc := range approximateDecimalBufferSizeRatTestCases {
		if v, ok := new(big.Rat).SetString(tc.value); ok {
			if n, d := v.Num().Int64(), v.Denom().Int64(); d != 0 && v.Cmp(big.NewRat(n, d)) == 0 {
				add(n, d)
			}
		}
	}
	add(math.MaxInt64, 1)
	add(-math.MaxInt64, 1)
	add(math.MinInt64, 1)
	add(1, math.MaxInt64)
	add(-1, math.MaxInt64)
	add(1, math.MinInt64)
	add(-1, math.MinInt64)
	add(1, 7365733-math.MaxInt64)
	add(7365733-math.MaxInt64, 1)
	f.Fuzz(func(t *testing.T, n, d int64) {
		if d == 0 {
			t.SkipNow()
		}
		tc := approximateDecimalBufferSizeRatTestCase{value: big.NewRat(n, d).String()}
		tc.test(t)
	})
}

func Fuzz_approximateDecimalBufferSize_ratBytes(f *testing.F) {
	add := func(n, d string) {
		f.Add(n, d)
	}
	fromInt := func(v *big.Int) string {
		return string(v.Bytes())
	}
	toInt := func(s string) *big.Int {
		return new(big.Int).SetBytes([]byte(s))
	}
	for _, tc := range approximateDecimalBufferSizeRatTestCases {
		if v, ok := new(big.Rat).SetString(tc.value); ok {
			add(fromInt(v.Num()), fromInt(v.Denom()))
		}
	}
	{
		b := make([]byte, 1024)
		for i := range b {
			b[i] = byte(1 + ((len(b) - i - 1) % math.MaxUint8))
		}
		huge := string(b)
		one := fromInt(big.NewInt(1))
		negOne := fromInt(big.NewInt(-1))
		three := fromInt(big.NewInt(3))
		negThree := fromInt(big.NewInt(-3))
		add(one, huge)
		add(huge, one)
		add(negOne, huge)
		add(huge, negOne)
		add(three, huge)
		add(huge, three)
		add(negThree, huge)
		add(huge, negThree)
	}
	f.Fuzz(func(t *testing.T, n, d string) {
		dv := toInt(d)
		if dv.Sign() == 0 {
			t.SkipNow()
		}
		nv := toInt(n)
		tc := approximateDecimalBufferSizeRatTestCase{value: new(big.Rat).SetFrac(nv, dv).String()}
		tc.test(t)
	})
}

func Test_approximateDecimalBufferSizeWithFixedDecimals_sharedCases(t *testing.T) {
	for _, tc := range approximateDecimalBufferSizeTestCases {
		t.Run(tc.name, func(t *testing.T) {
			f := tc.val(t)
			size1, significand1, decimals1 := approximateDecimalBufferSize((*bigFloatInfo)(f), 0) // baseline
			size2, significand2, decimals2 := approximateDecimalBufferSizeWithFixedDecimals((*bigFloatInfo)(f), 0)
			if significand1 != significand2 || decimals1 != decimals2 {
				t.Error(`expected significand and decimals to be identical to the base func: got`, significand2, decimals2, `expected`, significand1, decimals1)
			}
			if decimals2 == 0 {
				if size1 != size2 {
					t.Error(`expected value without decimals to have unmodified size: got`, size2, `expected`, size1)
				}
			} else if change := float64(size2)/float64(size1) - 1; change < 0 || change > 1 {
				t.Error(`expected size increase 0-100%:`, size2, `expected`, size1, `:`, fmt.Sprintf(`%.2f`, change*100), `%`)
			}
		})
	}
}

func approximateDecimalBufferSizeTestCaseFloat64s(f *testing.F) []float64 {
	m := make(map[float64]struct{})
	for _, tc := range approximateDecimalBufferSizeTestCases {
		v, _ := tc.val(f).Float64()
		m[v] = struct{}{}
	}
	v := maps.Keys(m)
	slices.Sort(v)
	return v
}

func Fuzz_approximateDecimalBufferSize_float64(f *testing.F) {
	for _, v := range approximateDecimalBufferSizeTestCaseFloat64s(f) {
		f.Add(v)
	}
	f.Fuzz(func(t *testing.T, val float64) {
		if math.IsNaN(val) || math.IsInf(val, 0) {
			t.SkipNow()
		}

		bigVal := big.NewFloat(val)
		bigValCopy := new(big.Float).Copy(bigVal)

		bytes, significand, decimals := approximateDecimalBufferSize((*bigFloatInfo)(bigVal), 0)

		if bigValCopy.Cmp(bigVal) != 0 || bigValCopy.Mode() != bigVal.Mode() || bigVal.Prec() != bigValCopy.Prec() {
			t.Fatalf(`unexpected mutation of input: %s != %s`, bigValCopy, bigVal)
		}

		// we don't really want to format huge values, so we parse the exponent form as verification...
		// WARNING: big.Float differs from strconv - it rounds as part of the formatting
		strVal := bigValCopy.SetPrec(bigValCopy.MinPrec()).Text('e', -1)

		eIndex := strings.IndexByte(strVal, 'e')
		if eIndex == -1 {
			t.Fatal(strVal)
		}

		exp, err := strconv.Atoi(strVal[eIndex+1:])
		if err != nil {
			t.Fatal(err)
		}

		decIndex := strings.IndexByte(strVal[:eIndex], '.')

		var digits string
		if decIndex == -1 {
			digits = strVal[:eIndex]
		} else {
			digits = strVal[:decIndex] + strVal[decIndex+1:eIndex]
		}

		mantissa, err := strconv.ParseInt(digits, 10, 64)
		if err != nil {
			t.Fatal(err)
		}

		if digits[0] == '-' || digits[0] == '+' {
			digits = digits[1:]
		}

		{
			v := mantissa
			if v < 0 {
				v = -v
			}
			if digits != strconv.FormatInt(v, 10) {
				t.Fatalf(`unexpected mantissa: %s != %d`, digits, v)
			}
		}

		// lhs = zeros after mantissa, before decimal
		var lhs int
		{
			delta := exp - len(digits)
			if decIndex != -1 {
				delta++
			}
			if delta > 0 {
				lhs = delta
			}
		}

		// rhs = zeros after decimal, before mantissa
		var rhs int
		if exp < -1 && mantissa != 0 {
			rhs = -(exp + 1)
		}

		// calculate the number of decimal places
		var decimalsExpected int
		if decIndex != -1 {
			decimalsExpected = len(digits) - 1
		}
		decimalsExpected -= exp
		if decimalsExpected < 0 {
			decimalsExpected = 0
		}

		expectedBytes := len(digits) + lhs + rhs
		if strVal[0] == '-' || strVal[0] == '+' {
			expectedBytes++
		}
		if math.Round(val) != val {
			expectedBytes++
		}

		t.Logf(`%s (mantissa=%d, exp=%d, lhs=%d, rhs=%d, dec=%d, bytes=%d): %d %d %d`, strVal, mantissa, exp, lhs, rhs, decimalsExpected, expectedBytes, bytes, significand, decimals)

		const (
			maxBytesDelta       = 30
			maxSignificandDelta = 30
			maxDecimalsDelta    = 30
		)

		if expectedBytes > bytes || expectedBytes < bytes-maxBytesDelta {
			t.Errorf(`unexpected bytes: %d < %d or delta more than %d`, bytes, expectedBytes, maxBytesDelta)
		}

		if len(digits) > significand || len(digits) < significand-maxSignificandDelta {
			t.Errorf(`unexpected significand: %d < %d or delta more than %d`, significand, len(digits), maxSignificandDelta)
		}

		if decimalsExpected > decimals || decimalsExpected < decimals-maxDecimalsDelta {
			t.Errorf(`unexpected decimals: %d < %d or delta more than %d`, decimals, decimalsExpected, maxDecimalsDelta)
		}
	})
}

func formatDecimalFloatUnsafe(b []byte, f *big.Float, bCap, decimals int, panicOnRealloc bool) ([]byte, int) {
	// TODO: potentially lower (accuracy+) bCap and decimals by handling the mantissa value?
	//exp := f.MantExp(f)        // get and remove exponent
	//defer f.SetMantExp(f, exp) // restore exponent

	b = slices.Grow(b, bCap)

	{
		old := b[:1] // bCap > 0, so this is safe
		b = f.Append(b, 'f', decimals)
		if panicOnRealloc && &old[0] != &b[0] {
			panic(`floater: format decimal float: buffer reallocation`)
		}
	}

	if decimals != 0 {
		b, decimals = trimTrailingZeros(b, decimals)
	}

	return b, decimals
}

func Fuzz_formatDecimalFloatUnsafe_float64(f *testing.F) {
	for i, v := range approximateDecimalBufferSizeTestCaseFloat64s(f) {
		f.Add(i, v)
	}
	f.Fuzz(func(t *testing.T, i int, val float64) {
		if math.IsNaN(val) || math.IsInf(val, 0) {
			t.SkipNow()
		}

		var buf []byte
		if n := i % 10; n != 0 {
			if n == 1 {
				buf = make([]byte, 0)
			}
			for j := 1; j < n; j++ {
				buf = append(buf, byte(rand.IntN(math.MaxUint8+1)))
			}
		}

		t.Logf(`input value: %g (~=%.2e)`, val, val)

		f := big.NewFloat(val)
		fCopy := new(big.Float).Copy(f)
		t.Log(approximateDecimalBufferSizeWithFixedDecimals((*bigFloatInfo)(f), 0))

		old := buf
		bCap, _, decimals := approximateDecimalBufferSizeWithFixedDecimals((*bigFloatInfo)(f), 0)
		buf, decimals = formatDecimalFloatUnsafe(buf, f, bCap, decimals, true)
		if f.Cmp(fCopy) != 0 || f.Mode() != fCopy.Mode() || f.Prec() != fCopy.Prec() {
			t.Fatalf(`unexpected mutation of input: %s != %s`, f, fCopy)
		}

		if len(old) >= len(buf) {
			t.Fatalf(`invalid buffer len`)
		}

		if !bytes.Equal(old, buf[:len(old)]) {
			t.Fatalf(`unexpected buffer content`)
		}

		s := string(buf[len(old):])
		t.Logf(`formatted string: %s`, s)

		// note: can't verify against big.Float, it accepts finer-grain precision of certain values
		if parsedStrconv, err := strconv.ParseFloat(s, 64); err != nil {
			t.Error(err)
		} else if parsedStrconv != val {
			fv, _ := f.Float64()
			t.Errorf(`unexpected result: %g (feq=%v) != %g (feq=%v)`, parsedStrconv, fv == parsedStrconv, val, fv == val)
		}

		if decimals < 0 {
			t.Fatal(`unexpected negative decimals:`, decimals, s)
		}
		if decimals != 0 {
			if len(s)-1-decimals != strings.IndexByte(s, '.') {
				t.Fatal(`unexpected negative decimals:`, decimals, s)
			}
			if s[len(s)-1] == '0' {
				t.Fatal(`trailing zero(s):`, decimals, s)
			}
		} else if strings.IndexByte(s, '.') != -1 {
			t.Fatal(`unexpected decimal position:`, decimals, s)
		}

		rounded := strconv.FormatFloat(val, 'f', -1, 64)

		if val2, err := strconv.ParseFloat(s, 64); err != nil || val2 != val {
			t.Fatalf(
				"unexpected result: ours=%d baseline=%d:\n%s\n%s\n%s\n%s\n%g\n%s",
				len(s),
				len(rounded),
				fmt.Sprint(`approximate buffer size = `, fmt.Sprint(approximateDecimalBufferSize((*bigFloatInfo)(big.NewFloat(val)), 0))),
				s,
				rounded,
				big.NewFloat(val).Text('f', -1),
				val,
				big.NewFloat(val).Text('e', -1),
			)
		}

		if len(s) <= len(rounded) {
			if decimals == 0 {
				if strings.IndexByte(rounded, '.') != -1 {
					t.Fatal(`unexpected rounded with decimal:`, rounded)
				}
				// note: the behavior of rounded is to munge non-significant digits
				prefix := strings.TrimRight(rounded, `0`)
				if len(prefix) != 0 {
					prefix = prefix[:len(prefix)-1]
				}
				if !strings.HasPrefix(s, prefix) {
					t.Fatalf(`unexpected result: %s !~= %s`, s, rounded)
				}
			} else if len(rounded) < len(s)-1-decimals {
				t.Fatal(`unexpected mantissa size in min unique:`, len(rounded), len(s)-1-decimals, s)
			} else if len(rounded) == len(s)-1-decimals {
				if !strings.HasPrefix(s, rounded) {
					t.Fatalf(`unexpected result: %s not prefixed with %s`, s, rounded)
				}
			} else if rounded[len(s)-1-decimals] != '.' || !strings.HasPrefix(s, rounded[:len(s)-decimals]) {
				t.Fatalf(`unexpected result: %s not prefixed with %s`, s, rounded)
			}
		}
	})
}

func Test_approximateDecimalBufferSizeWithFixedDecimals(t *testing.T) {
	for _, tc := range [...]struct {
		name                         string
		value                        *big.Float
		bytes, significand, decimals int
	}{
		{`float64 1.5999999999999943`, big.NewFloat(1.5999999999999943), 35, 17, 17},
		{`float64 -1.5999999999999943`, big.NewFloat(-1.5999999999999943), 36, 17, 17},
		{`42360000`, new(big.Float).SetPrec(128).SetInt64(42360000), 40, 40, 0},
		{`-42360000`, new(big.Float).SetPrec(128).SetInt64(-42360000), 41, 40, 0},
		{`float64 0.1`, big.NewFloat(0.1), 35, 17, 17},
		{`float64 -0.1`, big.NewFloat(-0.1), 36, 17, 17},
		{`float64 0.9`, big.NewFloat(0.999999999999999), 35, 17, 17},
		{`float64 -0.9`, big.NewFloat(-0.999999999999999), 36, 17, 17},
		{`float64 1.999999999999999e+7`, big.NewFloat(1.999999999999999e+7), 28, 17, 10},
	} {
		t.Run(tc.name, func(t *testing.T) {
			b, s, d := approximateDecimalBufferSizeWithFixedDecimals((*bigFloatInfo)(tc.value), 0)
			if b != tc.bytes {
				t.Errorf(`unexpected bytes: %d != %d`, b, tc.bytes)
			}
			if s != tc.significand {
				t.Errorf(`unexpected significand: %d != %d`, s, tc.significand)
			}
			if d != tc.decimals {
				t.Errorf(`unexpected decimals: %d != %d`, d, tc.decimals)
			}
		})
	}
}
